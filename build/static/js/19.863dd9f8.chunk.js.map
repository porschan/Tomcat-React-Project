{"version":3,"sources":["routes/taskDetail/service/index.js","routes/taskDetail/model/index.js"],"names":["getInitData","a","async","$$","post","config","serverUrl","namespace","state","subscriptions","setup","taskDetail","history","listen","pathname","effects","init","payload","call","put","select","dispatchjob","pageData","type","startPage","resInit","status","data","reducers","setInitData"],"mappings":"yLAGO,SAAeA,IAAf,SAAAC,EAAAC,OAAA,yEACEC,IAAGC,KAAKC,IAAOC,UAAY,oBAAqB,KADlD,uC,8ECKS,WACdC,UAAW,aAEXC,MAAO,GAEPC,cAAe,CACbC,MADa,YACgB,EAAtBC,WAAsB,EAAVC,QACTC,QAAO,YAAgB,EAAdC,cAMrBC,QAAS,CAELC,KAFK,uGAGc,OAHd,EAECC,QAFD,EAEYC,KAAMC,EAFlB,EAEkBA,IAAKC,EAFvB,EAEuBA,OAFvB,SAGoBA,GAAO,SAAAZ,GAC9B,OAAOA,EAAMa,eAJV,OAML,OANK,SAGEC,EAHF,EAGEA,SAHF,SAMCH,EAAI,CACRI,KAAM,cACNN,QAAS,CACPK,SAAUA,EAASE,UAAU,EAAG,OAT/B,0CAcLxB,YAdK,uGAiBa,OAHLiB,EAdR,EAcQA,QAAWC,EAdnB,EAcmBA,KAAMC,EAdzB,EAcyBA,IAdzB,SAgBgBF,EAAZK,SAhBJ,SAiBmBJ,EAAKlB,KAjBxB,UAkBmB,IADhByB,EAjBH,QAkBSC,OAlBT,iBAmBD,OAnBC,UAmBKP,EAAI,CACRI,KAAM,cACNN,QAASQ,EAAQE,OArBlB,+HA8BTC,SAAU,CACRC,YADQ,SACIrB,EADJ,GACuB,IAAXS,EAAU,EAAVA,QAClB,OAAO,eAAIT,EAAX,GAAqBS","file":"static/js/19.863dd9f8.chunk.js","sourcesContent":["import $$ from 'cmn-utils';\nimport config from '@/config';\n\nexport async function getInitData() {\n  return $$.post(config.serverUrl + '/deviceCheck/test', {});\n}\n","import {getInitData} from '../service/index';\n\n/**\n * 当第一次加载完页面时为true\n * 可以用这个值阻止切换页面时\n * 多次初始化数据\n */\nlet LOADED = false;\nexport default ({\n  namespace: 'taskDetail',\n\n  state: {},\n\n  subscriptions: {\n    setup({taskDetail, history}) {\n      history.listen(({pathname}) => {\n\n      });\n    }\n  },\n\n  effects: {\n    // 进入页面加载\n    * init({payload}, {call, put, select}) {\n      const {pageData} = yield select(state => {\n        return state.dispatchjob\n      });\n      yield put({\n        type: 'getInitData',\n        payload: {\n          pageData: pageData.startPage(1, 10)\n        }\n      });\n    },\n    // 获取初始化数据\n    * getInitData({payload}, {call, put}) {\n      try {\n        const {pageData} = payload;\n        const resInit = yield call(getInitData);\n        if (resInit.status == 0) {\n          yield put({\n            type: 'setInitData',\n            payload: resInit.data\n          });\n        }\n      } catch (e) {\n        throw e;\n      }\n    }\n  },\n\n  reducers: {\n    setInitData(state, {payload}) {\n      return {...state, ...payload};\n    },\n  }\n});\n"],"sourceRoot":""}