{"version":3,"sources":["routes/taskDetail/service/index.js","routes/taskDetail/components/index.js"],"names":["getInitData","a","async","$$","post","config","serverUrl","data","img","title","des","pageIndex","genData","pIndex","dataArr","i","push","prop","state","record","onRefresh","setState","refreshing","isLoading","setTimeout","rData","dataSource","cloneWithRows","onEndReached","event","hasMore","console","log","DataSource","rowHasChanged","row1","row2","height","document","documentElement","clientHeight","useBodyScroll","this","body","style","overflow","hei","ReactDOM","findDOMNode","lv","offsetTop","index","length","mode","icon","type","onLeftClick","info","history","back","rightContent","key","marginRight","ref","el","renderFooter","padding","textAlign","renderRow","rowData","sectionID","rowID","obj","backgroundColor","lineHeight","color","fontSize","borderBottom","display","width","src","alt","marginBottom","textOverflow","whiteSpace","maxWidth","renderSeparator","borderTop","border","pullToRefresh","pageSize","Component"],"mappings":"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","file":"static/js/17.76112afe.chunk.js","sourcesContent":["import $$ from 'cmn-utils';\nimport config from '@/config';\n\nexport async function getInitData() {\n  return $$.post(config.serverUrl + '/deviceCheck/test', {});\n}\n","/* eslint no-dupe-keys: 0, no-mixed-operators: 0 */\nimport React, { Component } from 'react';\nimport { Button,WingBlank, WhiteSpace,NavBar, Icon,PullToRefresh, ListView  } from 'antd-mobile';\nimport {getInitData} from \"../service\";\nimport './index.css';\nimport ReactDOM from 'react-dom'\n\nconst data = [\n    {\n        img: 'https://zos.alipayobjects.com/rmsportal/dKbkpPXKfvZzWCM.png',\n        title: 'Meet hotel',\n        des: '不是所有的兼职汪都需要风吹日晒',\n    },\n    {\n        img: 'https://zos.alipayobjects.com/rmsportal/XmwCzSeJiqpkuMB.png',\n        title: 'McDonald\\'s invites you',\n        des: '不是所有的兼职汪都需要风吹日晒',\n    },\n    {\n        img: 'https://zos.alipayobjects.com/rmsportal/hfVtzEhPzTUewPm.png',\n        title: 'Eat the week',\n        des: '不是所有的兼职汪都需要风吹日晒',\n    },\n];\nconst NUM_ROWS = 20;\nlet pageIndex = 0;\n\nfunction genData(pIndex = 0) {\n    const dataArr = [];\n    for (let i = 0; i < NUM_ROWS; i++) {\n        dataArr.push(`row - ${(pIndex * NUM_ROWS) + i}`);\n    }\n    return dataArr;\n}\n\nexport default class extends Component {\n\n  state = {\n    record: null,\n  };\n\n  constructor(prop) {\n    super(prop);\n    // let temp = getInitData();\n    // temp.then((resData) => {\n    //   const {status, data} = resData;\n    //   if (parseInt(status) === 0) {\n    //     console.log(data);\n    //   }\n    // }).catch((errData) => {\n    //   console.log(errData);\n    // });\n\n\n      const dataSource = new ListView.DataSource({\n          rowHasChanged: (row1, row2) => row1 !== row2,\n      });\n      this.state = {\n          dataSource,\n          refreshing: true,\n          isLoading: true,\n          height: document.documentElement.clientHeight,\n          useBodyScroll: false,\n      };\n  };\n\n    componentDidUpdate() {\n        if (this.state.useBodyScroll) {\n            document.body.style.overflow = 'auto';\n        } else {\n            document.body.style.overflow = 'hidden';\n        }\n    }\n\n    componentDidMount() {\n        const hei = this.state.height - ReactDOM.findDOMNode(this.lv).offsetTop;\n\n        setTimeout(() => {\n            this.rData = genData();\n            this.setState({\n                dataSource: this.state.dataSource.cloneWithRows(genData()),\n                height: hei,\n                refreshing: false,\n                isLoading: false,\n            });\n        }, 1500);\n    }\n\n    onRefresh = () => {\n        this.setState({ refreshing: true, isLoading: true });\n        // simulate initial Ajax\n        setTimeout(() => {\n            this.rData = genData();\n            this.setState({\n                dataSource: this.state.dataSource.cloneWithRows(this.rData),\n                refreshing: false,\n                isLoading: false,\n            });\n        }, 600);\n    };\n\n    onEndReached = (event) => {\n        // load new data\n        // hasMore: from backend data, indicates whether it is the last page, here is false\n        if (this.state.isLoading && !this.state.hasMore) {\n            return;\n        }\n        console.log('reach end', event);\n        this.setState({ isLoading: true });\n        setTimeout(() => {\n            this.rData = [...this.rData, ...genData(++pageIndex)];\n            this.setState({\n                dataSource: this.state.dataSource.cloneWithRows(this.rData),\n                isLoading: false,\n            });\n        }, 1000);\n    };\n\n  render() {\n\n      const separator = (sectionID, rowID) => (\n          <div\n              key={`${sectionID}-${rowID}`}\n              style={{\n                  backgroundColor: '#F5F5F9',\n                  height: 8,\n                  borderTop: '1px solid #ECECED',\n                  borderBottom: '1px solid #ECECED',\n              }}\n          />\n      );\n      let index = data.length - 1;\n      const row = (rowData, sectionID, rowID) => {\n          if (index < 0) {\n              index = data.length - 1;\n          }\n          const obj = data[index--];\n          return (\n              <div key={rowID}\n                   style={{\n                       padding: '0 15px',\n                       backgroundColor: 'white',\n                   }}\n              >\n                  <div style={{ height: '50px', lineHeight: '50px', color: '#888', fontSize: '18px', borderBottom: '1px solid #ddd' }}>\n                      {obj.title}\n                  </div>\n                  {/*<div style={{ display: '-webkit-box', display: 'flex', padding: '15px' }}>*/}\n                  <div style={{ display: '-webkit-box', padding: '15px' }}>\n                      <img style={{ height: '63px', width: '63px', marginRight: '15px' }} src={obj.img} alt=\"\" />\n                      <div style={{ display: 'inline-block' }}>\n                          <div style={{ marginBottom: '8px', color: '#000', fontSize: '16px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxWidth: '250px' }}>{obj.des}-{rowData}</div>\n                          <div style={{ fontSize: '16px' }}><span style={{ fontSize: '30px', color: '#FF6E27' }}>{rowID}</span> 元/任务</div>\n                      </div>\n                  </div>\n              </div>\n          );\n      };\n\n\n\n    return (\n\n        <div>\n\n            <NavBar\n                mode=\"light\"\n                icon={<Icon type=\"left\" />}\n                onLeftClick={() => {\n                    console.info('onLeftClick')\n                    history.back();\n                }}\n                rightContent={[\n                    <Icon key=\"0\" type=\"search\" style={{ marginRight: '16px' }} />,\n                ]}\n            >查询工单</NavBar>\n\n            <div>\n                {/*<Button*/}\n                {/*    style={{ margin: '30px 15px' }}*/}\n                {/*    inline*/}\n                {/*    onClick={() => this.setState({ useBodyScroll: !this.state.useBodyScroll })}*/}\n                {/*>*/}\n                {/*    {this.state.useBodyScroll ? 'useBodyScroll' : 'partial scroll'}*/}\n                {/*</Button>*/}\n                <ListView\n                    key={this.state.useBodyScroll ? '0' : '1'}\n                    ref={el => this.lv = el}\n                    dataSource={this.state.dataSource}\n\n                    renderFooter={() => (<div style={{ padding: 30, textAlign: 'center' }}>\n                        {this.state.isLoading ? 'Loading...' : 'Loaded'}\n                    </div>)}\n                    renderRow={row}\n                    renderSeparator={separator}\n                    useBodyScroll={this.state.useBodyScroll}\n                    style={this.state.useBodyScroll ? {} : {\n                        height: this.state.height,\n                        border: '1px solid #ddd',\n                        // margin: '5px 0',\n                    }}\n                    pullToRefresh={<PullToRefresh\n                        refreshing={this.state.refreshing}\n                        onRefresh={this.onRefresh}\n                    />}\n                    onEndReached={this.onEndReached}\n                    pageSize={5}\n                />\n            </div>\n\n        </div>\n\n    );\n  }\n}\n"],"sourceRoot":""}